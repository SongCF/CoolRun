// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocol_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace CoolRun {

void protobuf_ShutdownFile_protocol_5fmessage_2eproto() {
  delete RegistReq::default_instance_;
  delete RegistRsp::default_instance_;
  delete LoginReq::default_instance_;
  delete LoginRsp::default_instance_;
  delete AlterInfoReq::default_instance_;
  delete AlterInfoRsp::default_instance_;
  delete UnitInfo::default_instance_;
  delete UpdateInfoReq::default_instance_;
  delete UpdateInfoRsp::default_instance_;
  delete ItemInfo::default_instance_;
  delete AttachInfo::default_instance_;
  delete MailInfo::default_instance_;
  delete QueryMailReq::default_instance_;
  delete QueryMailRsp::default_instance_;
  delete ReadMailReq::default_instance_;
  delete ReadMailRsp::default_instance_;
  delete RankBonusInfo::default_instance_;
  delete RankUserInfo::default_instance_;
  delete QueryRankBonusReq::default_instance_;
  delete QueryRankBonusRsp::default_instance_;
  delete QueryRankListReq::default_instance_;
  delete QueryRankListRsp::default_instance_;
  delete BonusInfo::default_instance_;
  delete QuerySystemBonusReq::default_instance_;
  delete QuerySystemBonusRsp::default_instance_;
  delete GetSystemBonusReq::default_instance_;
  delete GetSystemBonusRsp::default_instance_;
  delete GiftBagAttach::default_instance_;
  delete GiftBagInfo::default_instance_;
  delete QueryGiftBagReq::default_instance_;
  delete QueryGiftBagRsp::default_instance_;
  delete UnifyReq::default_instance_;
  delete UnifyRsp::default_instance_;
  delete ReconfigureReq::default_instance_;
  delete ReconfigureRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_protocol_5fmessage_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_protocol_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  RegistReq::default_instance_ = new RegistReq();
  RegistRsp::default_instance_ = new RegistRsp();
  LoginReq::default_instance_ = new LoginReq();
  LoginRsp::default_instance_ = new LoginRsp();
  AlterInfoReq::default_instance_ = new AlterInfoReq();
  AlterInfoRsp::default_instance_ = new AlterInfoRsp();
  UnitInfo::default_instance_ = new UnitInfo();
  UpdateInfoReq::default_instance_ = new UpdateInfoReq();
  UpdateInfoRsp::default_instance_ = new UpdateInfoRsp();
  ItemInfo::default_instance_ = new ItemInfo();
  AttachInfo::default_instance_ = new AttachInfo();
  MailInfo::default_instance_ = new MailInfo();
  QueryMailReq::default_instance_ = new QueryMailReq();
  QueryMailRsp::default_instance_ = new QueryMailRsp();
  ReadMailReq::default_instance_ = new ReadMailReq();
  ReadMailRsp::default_instance_ = new ReadMailRsp();
  RankBonusInfo::default_instance_ = new RankBonusInfo();
  RankUserInfo::default_instance_ = new RankUserInfo();
  QueryRankBonusReq::default_instance_ = new QueryRankBonusReq();
  QueryRankBonusRsp::default_instance_ = new QueryRankBonusRsp();
  QueryRankListReq::default_instance_ = new QueryRankListReq();
  QueryRankListRsp::default_instance_ = new QueryRankListRsp();
  BonusInfo::default_instance_ = new BonusInfo();
  QuerySystemBonusReq::default_instance_ = new QuerySystemBonusReq();
  QuerySystemBonusRsp::default_instance_ = new QuerySystemBonusRsp();
  GetSystemBonusReq::default_instance_ = new GetSystemBonusReq();
  GetSystemBonusRsp::default_instance_ = new GetSystemBonusRsp();
  GiftBagAttach::default_instance_ = new GiftBagAttach();
  GiftBagInfo::default_instance_ = new GiftBagInfo();
  QueryGiftBagReq::default_instance_ = new QueryGiftBagReq();
  QueryGiftBagRsp::default_instance_ = new QueryGiftBagRsp();
  UnifyReq::default_instance_ = new UnifyReq();
  UnifyRsp::default_instance_ = new UnifyRsp();
  ReconfigureReq::default_instance_ = new ReconfigureReq();
  ReconfigureRsp::default_instance_ = new ReconfigureRsp();
  RegistReq::default_instance_->InitAsDefaultInstance();
  RegistRsp::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  LoginRsp::default_instance_->InitAsDefaultInstance();
  AlterInfoReq::default_instance_->InitAsDefaultInstance();
  AlterInfoRsp::default_instance_->InitAsDefaultInstance();
  UnitInfo::default_instance_->InitAsDefaultInstance();
  UpdateInfoReq::default_instance_->InitAsDefaultInstance();
  UpdateInfoRsp::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  AttachInfo::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  QueryMailReq::default_instance_->InitAsDefaultInstance();
  QueryMailRsp::default_instance_->InitAsDefaultInstance();
  ReadMailReq::default_instance_->InitAsDefaultInstance();
  ReadMailRsp::default_instance_->InitAsDefaultInstance();
  RankBonusInfo::default_instance_->InitAsDefaultInstance();
  RankUserInfo::default_instance_->InitAsDefaultInstance();
  QueryRankBonusReq::default_instance_->InitAsDefaultInstance();
  QueryRankBonusRsp::default_instance_->InitAsDefaultInstance();
  QueryRankListReq::default_instance_->InitAsDefaultInstance();
  QueryRankListRsp::default_instance_->InitAsDefaultInstance();
  BonusInfo::default_instance_->InitAsDefaultInstance();
  QuerySystemBonusReq::default_instance_->InitAsDefaultInstance();
  QuerySystemBonusRsp::default_instance_->InitAsDefaultInstance();
  GetSystemBonusReq::default_instance_->InitAsDefaultInstance();
  GetSystemBonusRsp::default_instance_->InitAsDefaultInstance();
  GiftBagAttach::default_instance_->InitAsDefaultInstance();
  GiftBagInfo::default_instance_->InitAsDefaultInstance();
  QueryGiftBagReq::default_instance_->InitAsDefaultInstance();
  QueryGiftBagRsp::default_instance_->InitAsDefaultInstance();
  UnifyReq::default_instance_->InitAsDefaultInstance();
  UnifyRsp::default_instance_->InitAsDefaultInstance();
  ReconfigureReq::default_instance_->InitAsDefaultInstance();
  ReconfigureRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocol_5fmessage_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_protocol_5fmessage_2eproto_once_);
void protobuf_AddDesc_protocol_5fmessage_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_protocol_5fmessage_2eproto_once_,
                 &protobuf_AddDesc_protocol_5fmessage_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocol_5fmessage_2eproto {
  StaticDescriptorInitializer_protocol_5fmessage_2eproto() {
    protobuf_AddDesc_protocol_5fmessage_2eproto();
  }
} static_descriptor_initializer_protocol_5fmessage_2eproto_;
#endif
bool PlatformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

bool MailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegistReq::kPlatformFieldNumber;
const int RegistReq::kAccountFieldNumber;
const int RegistReq::kPasswdFieldNumber;
const int RegistReq::kNicknameFieldNumber;
#endif  // !_MSC_VER

RegistReq::RegistReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistReq::InitAsDefaultInstance() {
}

RegistReq::RegistReq(const RegistReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistReq::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistReq::~RegistReq() {
  SharedDtor();
}

void RegistReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistReq& RegistReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RegistReq* RegistReq::default_instance_ = NULL;

RegistReq* RegistReq::New() const {
  return new RegistReq;
}

void RegistReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CoolRun.PlatformType platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CoolRun::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::CoolRun::PlatformType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_nickname;
        break;
      }

      // optional string nickname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CoolRun.PlatformType platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }

  // optional string nickname = 4;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nickname(), output);
  }

}

int RegistReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CoolRun.PlatformType platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string nickname = 4;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistReq*>(&from));
}

void RegistReq::MergeFrom(const RegistReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void RegistReq::CopyFrom(const RegistReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistReq::Swap(RegistReq* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistReq::GetTypeName() const {
  return "CoolRun.RegistReq";
}


// ===================================================================

#ifndef _MSC_VER
const int RegistRsp::kRspCodeFieldNumber;
const int RegistRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

RegistRsp::RegistRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RegistRsp::InitAsDefaultInstance() {
}

RegistRsp::RegistRsp(const RegistRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RegistRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistRsp::~RegistRsp() {
  SharedDtor();
}

void RegistRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void RegistRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RegistRsp& RegistRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RegistRsp* RegistRsp::default_instance_ = NULL;

RegistRsp* RegistRsp::New() const {
  return new RegistRsp;
}

void RegistRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RegistRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

}

int RegistRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RegistRsp*>(&from));
}

void RegistRsp::MergeFrom(const RegistRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void RegistRsp::CopyFrom(const RegistRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegistRsp::Swap(RegistRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RegistRsp::GetTypeName() const {
  return "CoolRun.RegistRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginReq& LoginReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginReq*>(&from));
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginReq::GetTypeName() const {
  return "CoolRun.LoginReq";
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRsp::kRspCodeFieldNumber;
const int LoginRsp::kNewMailFieldNumber;
const int LoginRsp::kLastGroupFieldNumber;
const int LoginRsp::kLastOrderFieldNumber;
#endif  // !_MSC_VER

LoginRsp::LoginRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoginRsp::InitAsDefaultInstance() {
}

LoginRsp::LoginRsp(const LoginRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  new_mail_ = 0;
  last_group_ = 0;
  last_order_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRsp::~LoginRsp() {
  SharedDtor();
}

void LoginRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoginRsp& LoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

LoginRsp* LoginRsp::default_instance_ = NULL;

LoginRsp* LoginRsp::New() const {
  return new LoginRsp;
}

void LoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    new_mail_ = 0;
    last_group_ = 0;
    last_order_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_new_mail;
        break;
      }

      // optional int32 new_mail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_new_mail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_mail_)));
          set_has_new_mail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_group;
        break;
      }

      // optional int32 last_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_group_)));
          set_has_last_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_order;
        break;
      }

      // optional int32 last_order = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_order_)));
          set_has_last_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional int32 new_mail = 2;
  if (has_new_mail()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->new_mail(), output);
  }

  // optional int32 last_group = 3;
  if (has_last_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->last_group(), output);
  }

  // optional int32 last_order = 4;
  if (has_last_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->last_order(), output);
  }

}

int LoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional int32 new_mail = 2;
    if (has_new_mail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->new_mail());
    }

    // optional int32 last_group = 3;
    if (has_last_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_group());
    }

    // optional int32 last_order = 4;
    if (has_last_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_order());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoginRsp*>(&from));
}

void LoginRsp::MergeFrom(const LoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_new_mail()) {
      set_new_mail(from.new_mail());
    }
    if (from.has_last_group()) {
      set_last_group(from.last_group());
    }
    if (from.has_last_order()) {
      set_last_order(from.last_order());
    }
  }
}

void LoginRsp::CopyFrom(const LoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRsp::Swap(LoginRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(new_mail_, other->new_mail_);
    std::swap(last_group_, other->last_group_);
    std::swap(last_order_, other->last_order_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoginRsp::GetTypeName() const {
  return "CoolRun.LoginRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int AlterInfoReq::kUserIdFieldNumber;
const int AlterInfoReq::kNicknameFieldNumber;
#endif  // !_MSC_VER

AlterInfoReq::AlterInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AlterInfoReq::InitAsDefaultInstance() {
}

AlterInfoReq::AlterInfoReq(const AlterInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AlterInfoReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterInfoReq::~AlterInfoReq() {
  SharedDtor();
}

void AlterInfoReq::SharedDtor() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AlterInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlterInfoReq& AlterInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

AlterInfoReq* AlterInfoReq::default_instance_ = NULL;

AlterInfoReq* AlterInfoReq::New() const {
  return new AlterInfoReq;
}

void AlterInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    if (has_nickname()) {
      if (nickname_ != &::google::protobuf::internal::kEmptyString) {
        nickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AlterInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nickname;
        break;
      }

      // optional string nickname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nickname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlterInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // optional string nickname = 2;
  if (has_nickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nickname(), output);
  }

}

int AlterInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // optional string nickname = 2;
    if (has_nickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nickname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlterInfoReq*>(&from));
}

void AlterInfoReq::MergeFrom(const AlterInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_nickname()) {
      set_nickname(from.nickname());
    }
  }
}

void AlterInfoReq::CopyFrom(const AlterInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlterInfoReq::Swap(AlterInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(nickname_, other->nickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AlterInfoReq::GetTypeName() const {
  return "CoolRun.AlterInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int AlterInfoRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

AlterInfoRsp::AlterInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AlterInfoRsp::InitAsDefaultInstance() {
}

AlterInfoRsp::AlterInfoRsp(const AlterInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AlterInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterInfoRsp::~AlterInfoRsp() {
  SharedDtor();
}

void AlterInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AlterInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AlterInfoRsp& AlterInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

AlterInfoRsp* AlterInfoRsp::default_instance_ = NULL;

AlterInfoRsp* AlterInfoRsp::New() const {
  return new AlterInfoRsp;
}

void AlterInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AlterInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlterInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int AlterInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AlterInfoRsp*>(&from));
}

void AlterInfoRsp::MergeFrom(const AlterInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void AlterInfoRsp::CopyFrom(const AlterInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AlterInfoRsp::Swap(AlterInfoRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AlterInfoRsp::GetTypeName() const {
  return "CoolRun.AlterInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UnitInfo::kTypeFieldNumber;
const int UnitInfo::kIsActivateFieldNumber;
const int UnitInfo::kIsUseFieldNumber;
const int UnitInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

UnitInfo::UnitInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnitInfo::InitAsDefaultInstance() {
}

UnitInfo::UnitInfo(const UnitInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnitInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  is_activate_ = false;
  is_use_ = false;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitInfo::~UnitInfo() {
  SharedDtor();
}

void UnitInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnitInfo& UnitInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UnitInfo* UnitInfo::default_instance_ = NULL;

UnitInfo* UnitInfo::New() const {
  return new UnitInfo;
}

void UnitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    is_activate_ = false;
    is_use_ = false;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_activate;
        break;
      }

      // required bool is_activate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_activate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_activate_)));
          set_has_is_activate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_use;
        break;
      }

      // required bool is_use = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_use_)));
          set_has_is_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bool is_activate = 2;
  if (has_is_activate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_activate(), output);
  }

  // required bool is_use = 3;
  if (has_is_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_use(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

}

int UnitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bool is_activate = 2;
    if (has_is_activate()) {
      total_size += 1 + 1;
    }

    // required bool is_use = 3;
    if (has_is_use()) {
      total_size += 1 + 1;
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnitInfo*>(&from));
}

void UnitInfo::MergeFrom(const UnitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_activate()) {
      set_is_activate(from.is_activate());
    }
    if (from.has_is_use()) {
      set_is_use(from.is_use());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void UnitInfo::CopyFrom(const UnitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UnitInfo::Swap(UnitInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_activate_, other->is_activate_);
    std::swap(is_use_, other->is_use_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnitInfo::GetTypeName() const {
  return "CoolRun.UnitInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateInfoReq::kUserIdFieldNumber;
const int UpdateInfoReq::kScoreFieldNumber;
const int UpdateInfoReq::kDistanceFieldNumber;
const int UpdateInfoReq::kActorFieldNumber;
const int UpdateInfoReq::kPetFieldNumber;
const int UpdateInfoReq::kMagicFieldNumber;
#endif  // !_MSC_VER

UpdateInfoReq::UpdateInfoReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateInfoReq::InitAsDefaultInstance() {
}

UpdateInfoReq::UpdateInfoReq(const UpdateInfoReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateInfoReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  score_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateInfoReq::~UpdateInfoReq() {
  SharedDtor();
}

void UpdateInfoReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateInfoReq& UpdateInfoReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UpdateInfoReq* UpdateInfoReq::default_instance_ = NULL;

UpdateInfoReq* UpdateInfoReq::New() const {
  return new UpdateInfoReq;
}

void UpdateInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    score_ = 0;
    distance_ = 0;
  }
  actor_.Clear();
  pet_.Clear();
  magic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // required int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // required int32 distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actor;
        break;
      }

      // repeated .CoolRun.UnitInfo actor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_actor;
        if (input->ExpectTag(42)) goto parse_pet;
        break;
      }

      // repeated .CoolRun.UnitInfo pet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pet;
        if (input->ExpectTag(50)) goto parse_magic;
        break;
      }

      // repeated .CoolRun.UnitInfo magic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_magic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_magic;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->distance(), output);
  }

  // repeated .CoolRun.UnitInfo actor = 4;
  for (int i = 0; i < this->actor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->actor(i), output);
  }

  // repeated .CoolRun.UnitInfo pet = 5;
  for (int i = 0; i < this->pet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->pet(i), output);
  }

  // repeated .CoolRun.UnitInfo magic = 6;
  for (int i = 0; i < this->magic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->magic(i), output);
  }

}

int UpdateInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

  }
  // repeated .CoolRun.UnitInfo actor = 4;
  total_size += 1 * this->actor_size();
  for (int i = 0; i < this->actor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actor(i));
  }

  // repeated .CoolRun.UnitInfo pet = 5;
  total_size += 1 * this->pet_size();
  for (int i = 0; i < this->pet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet(i));
  }

  // repeated .CoolRun.UnitInfo magic = 6;
  total_size += 1 * this->magic_size();
  for (int i = 0; i < this->magic_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->magic(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateInfoReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateInfoReq*>(&from));
}

void UpdateInfoReq::MergeFrom(const UpdateInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  actor_.MergeFrom(from.actor_);
  pet_.MergeFrom(from.pet_);
  magic_.MergeFrom(from.magic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
}

void UpdateInfoReq::CopyFrom(const UpdateInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < actor_size(); i++) {
    if (!this->actor(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pet_size(); i++) {
    if (!this->pet(i).IsInitialized()) return false;
  }
  for (int i = 0; i < magic_size(); i++) {
    if (!this->magic(i).IsInitialized()) return false;
  }
  return true;
}

void UpdateInfoReq::Swap(UpdateInfoReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(score_, other->score_);
    std::swap(distance_, other->distance_);
    actor_.Swap(&other->actor_);
    pet_.Swap(&other->pet_);
    magic_.Swap(&other->magic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateInfoReq::GetTypeName() const {
  return "CoolRun.UpdateInfoReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateInfoRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

UpdateInfoRsp::UpdateInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UpdateInfoRsp::InitAsDefaultInstance() {
}

UpdateInfoRsp::UpdateInfoRsp(const UpdateInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateInfoRsp::~UpdateInfoRsp() {
  SharedDtor();
}

void UpdateInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UpdateInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UpdateInfoRsp& UpdateInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UpdateInfoRsp* UpdateInfoRsp::default_instance_ = NULL;

UpdateInfoRsp* UpdateInfoRsp::New() const {
  return new UpdateInfoRsp;
}

void UpdateInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UpdateInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int UpdateInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UpdateInfoRsp*>(&from));
}

void UpdateInfoRsp::MergeFrom(const UpdateInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void UpdateInfoRsp::CopyFrom(const UpdateInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateInfoRsp::Swap(UpdateInfoRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UpdateInfoRsp::GetTypeName() const {
  return "CoolRun.UpdateInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kTypeFieldNumber;
const int ItemInfo::kCountFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemInfo& ItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemInfo*>(&from));
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemInfo::GetTypeName() const {
  return "CoolRun.ItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int AttachInfo::kItemFieldNumber;
const int AttachInfo::kVitalityFieldNumber;
#endif  // !_MSC_VER

AttachInfo::AttachInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AttachInfo::InitAsDefaultInstance() {
}

AttachInfo::AttachInfo(const AttachInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AttachInfo::SharedCtor() {
  _cached_size_ = 0;
  vitality_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttachInfo::~AttachInfo() {
  SharedDtor();
}

void AttachInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AttachInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AttachInfo& AttachInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

AttachInfo* AttachInfo::default_instance_ = NULL;

AttachInfo* AttachInfo::New() const {
  return new AttachInfo;
}

void AttachInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    vitality_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AttachInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CoolRun.ItemInfo item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_vitality;
        break;
      }

      // optional int32 vitality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vitality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vitality_)));
          set_has_vitality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttachInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CoolRun.ItemInfo item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // optional int32 vitality = 2;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vitality(), output);
  }

}

int AttachInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 vitality = 2;
    if (has_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vitality());
    }

  }
  // repeated .CoolRun.ItemInfo item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AttachInfo*>(&from));
}

void AttachInfo::MergeFrom(const AttachInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_vitality()) {
      set_vitality(from.vitality());
    }
  }
}

void AttachInfo::CopyFrom(const AttachInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachInfo::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AttachInfo::Swap(AttachInfo* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(vitality_, other->vitality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AttachInfo::GetTypeName() const {
  return "CoolRun.AttachInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kTypeFieldNumber;
const int MailInfo::kIsReadFieldNumber;
const int MailInfo::kIdFieldNumber;
const int MailInfo::kAddresserIdFieldNumber;
const int MailInfo::kAttachFieldNumber;
const int MailInfo::kAddresserFieldNumber;
const int MailInfo::kContentFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attach_ = const_cast< ::CoolRun::AttachInfo*>(
      ::CoolRun::AttachInfo::internal_default_instance());
#else
  attach_ = const_cast< ::CoolRun::AttachInfo*>(&::CoolRun::AttachInfo::default_instance());
#endif
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  is_read_ = false;
  id_ = 0;
  addresser_id_ = 0;
  attach_ = NULL;
  addresser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (addresser_ != &::google::protobuf::internal::kEmptyString) {
    delete addresser_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attach_;
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MailInfo& MailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    is_read_ = false;
    id_ = 0;
    addresser_id_ = 0;
    if (has_attach()) {
      if (attach_ != NULL) attach_->::CoolRun::AttachInfo::Clear();
    }
    if (has_addresser()) {
      if (addresser_ != &::google::protobuf::internal::kEmptyString) {
        addresser_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CoolRun.MailType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CoolRun::MailType_IsValid(value)) {
            set_type(static_cast< ::CoolRun::MailType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_read;
        break;
      }

      // required bool is_read = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_read_)));
          set_has_is_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // required int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addresser_id;
        break;
      }

      // required int32 addresser_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addresser_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addresser_id_)));
          set_has_addresser_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attach;
        break;
      }

      // optional .CoolRun.AttachInfo attach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_addresser;
        break;
      }

      // optional string addresser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addresser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addresser()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CoolRun.MailType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required bool is_read = 2;
  if (has_is_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_read(), output);
  }

  // required int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // required int32 addresser_id = 4;
  if (has_addresser_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addresser_id(), output);
  }

  // optional .CoolRun.AttachInfo attach = 5;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attach(), output);
  }

  // optional string addresser = 6;
  if (has_addresser()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->addresser(), output);
  }

  // optional string content = 7;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }

}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CoolRun.MailType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required bool is_read = 2;
    if (has_is_read()) {
      total_size += 1 + 1;
    }

    // required int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 addresser_id = 4;
    if (has_addresser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addresser_id());
    }

    // optional .CoolRun.AttachInfo attach = 5;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach());
    }

    // optional string addresser = 6;
    if (has_addresser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addresser());
    }

    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MailInfo*>(&from));
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_read()) {
      set_is_read(from.is_read());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_addresser_id()) {
      set_addresser_id(from.addresser_id());
    }
    if (from.has_attach()) {
      mutable_attach()->::CoolRun::AttachInfo::MergeFrom(from.attach());
    }
    if (from.has_addresser()) {
      set_addresser(from.addresser());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_attach()) {
    if (!this->attach().IsInitialized()) return false;
  }
  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(is_read_, other->is_read_);
    std::swap(id_, other->id_);
    std::swap(addresser_id_, other->addresser_id_);
    std::swap(attach_, other->attach_);
    std::swap(addresser_, other->addresser_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MailInfo::GetTypeName() const {
  return "CoolRun.MailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMailReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

QueryMailReq::QueryMailReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryMailReq::InitAsDefaultInstance() {
}

QueryMailReq::QueryMailReq(const QueryMailReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryMailReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMailReq::~QueryMailReq() {
  SharedDtor();
}

void QueryMailReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryMailReq& QueryMailReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryMailReq* QueryMailReq::default_instance_ = NULL;

QueryMailReq* QueryMailReq::New() const {
  return new QueryMailReq;
}

void QueryMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

}

int QueryMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMailReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryMailReq*>(&from));
}

void QueryMailReq::MergeFrom(const QueryMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void QueryMailReq::CopyFrom(const QueryMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryMailReq::Swap(QueryMailReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryMailReq::GetTypeName() const {
  return "CoolRun.QueryMailReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMailRsp::kRspCodeFieldNumber;
const int QueryMailRsp::kEmailFieldNumber;
#endif  // !_MSC_VER

QueryMailRsp::QueryMailRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryMailRsp::InitAsDefaultInstance() {
}

QueryMailRsp::QueryMailRsp(const QueryMailRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryMailRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMailRsp::~QueryMailRsp() {
  SharedDtor();
}

void QueryMailRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryMailRsp& QueryMailRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryMailRsp* QueryMailRsp::default_instance_ = NULL;

QueryMailRsp* QueryMailRsp::New() const {
  return new QueryMailRsp;
}

void QueryMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  email_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_email;
        break;
      }

      // repeated .CoolRun.MailInfo email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_email;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .CoolRun.MailInfo email = 2;
  for (int i = 0; i < this->email_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->email(i), output);
  }

}

int QueryMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .CoolRun.MailInfo email = 2;
  total_size += 1 * this->email_size();
  for (int i = 0; i < this->email_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->email(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMailRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryMailRsp*>(&from));
}

void QueryMailRsp::MergeFrom(const QueryMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  email_.MergeFrom(from.email_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void QueryMailRsp::CopyFrom(const QueryMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < email_size(); i++) {
    if (!this->email(i).IsInitialized()) return false;
  }
  return true;
}

void QueryMailRsp::Swap(QueryMailRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    email_.Swap(&other->email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryMailRsp::GetTypeName() const {
  return "CoolRun.QueryMailRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int ReadMailReq::kUserIdFieldNumber;
const int ReadMailReq::kIdFieldNumber;
#endif  // !_MSC_VER

ReadMailReq::ReadMailReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReadMailReq::InitAsDefaultInstance() {
}

ReadMailReq::ReadMailReq(const ReadMailReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReadMailReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMailReq::~ReadMailReq() {
  SharedDtor();
}

void ReadMailReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReadMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReadMailReq& ReadMailReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ReadMailReq* ReadMailReq::default_instance_ = NULL;

ReadMailReq* ReadMailReq::New() const {
  return new ReadMailReq;
}

void ReadMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReadMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

}

int ReadMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMailReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReadMailReq*>(&from));
}

void ReadMailReq::MergeFrom(const ReadMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void ReadMailReq::CopyFrom(const ReadMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadMailReq::Swap(ReadMailReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReadMailReq::GetTypeName() const {
  return "CoolRun.ReadMailReq";
}


// ===================================================================

#ifndef _MSC_VER
const int ReadMailRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

ReadMailRsp::ReadMailRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReadMailRsp::InitAsDefaultInstance() {
}

ReadMailRsp::ReadMailRsp(const ReadMailRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReadMailRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadMailRsp::~ReadMailRsp() {
  SharedDtor();
}

void ReadMailRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReadMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReadMailRsp& ReadMailRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ReadMailRsp* ReadMailRsp::default_instance_ = NULL;

ReadMailRsp* ReadMailRsp::New() const {
  return new ReadMailRsp;
}

void ReadMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReadMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int ReadMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadMailRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReadMailRsp*>(&from));
}

void ReadMailRsp::MergeFrom(const ReadMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void ReadMailRsp::CopyFrom(const ReadMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadMailRsp::Swap(ReadMailRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReadMailRsp::GetTypeName() const {
  return "CoolRun.ReadMailRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int RankBonusInfo::kIdFieldNumber;
const int RankBonusInfo::kGroupIdFieldNumber;
const int RankBonusInfo::kGroupNameFieldNumber;
const int RankBonusInfo::kBonusIdFieldNumber;
const int RankBonusInfo::kAttachFieldNumber;
#endif  // !_MSC_VER

RankBonusInfo::RankBonusInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankBonusInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attach_ = const_cast< ::CoolRun::AttachInfo*>(
      ::CoolRun::AttachInfo::internal_default_instance());
#else
  attach_ = const_cast< ::CoolRun::AttachInfo*>(&::CoolRun::AttachInfo::default_instance());
#endif
}

RankBonusInfo::RankBonusInfo(const RankBonusInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankBonusInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  group_id_ = 0;
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bonus_id_ = 0;
  attach_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankBonusInfo::~RankBonusInfo() {
  SharedDtor();
}

void RankBonusInfo::SharedDtor() {
  if (group_name_ != &::google::protobuf::internal::kEmptyString) {
    delete group_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attach_;
  }
}

void RankBonusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankBonusInfo& RankBonusInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RankBonusInfo* RankBonusInfo::default_instance_ = NULL;

RankBonusInfo* RankBonusInfo::New() const {
  return new RankBonusInfo;
}

void RankBonusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    group_id_ = 0;
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::kEmptyString) {
        group_name_->clear();
      }
    }
    bonus_id_ = 0;
    if (has_attach()) {
      if (attach_ != NULL) attach_->::CoolRun::AttachInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankBonusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group_id;
        break;
      }

      // optional int32 group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_group_name;
        break;
      }

      // optional string group_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bonus_id;
        break;
      }

      // optional int32 bonus_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bonus_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bonus_id_)));
          set_has_bonus_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attach;
        break;
      }

      // optional .CoolRun.AttachInfo attach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankBonusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 group_id = 2;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group_id(), output);
  }

  // optional string group_name = 3;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_name(), output);
  }

  // optional int32 bonus_id = 4;
  if (has_bonus_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bonus_id(), output);
  }

  // optional .CoolRun.AttachInfo attach = 5;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attach(), output);
  }

}

int RankBonusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 group_id = 2;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group_id());
    }

    // optional string group_name = 3;
    if (has_group_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional int32 bonus_id = 4;
    if (has_bonus_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bonus_id());
    }

    // optional .CoolRun.AttachInfo attach = 5;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankBonusInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankBonusInfo*>(&from));
}

void RankBonusInfo::MergeFrom(const RankBonusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_bonus_id()) {
      set_bonus_id(from.bonus_id());
    }
    if (from.has_attach()) {
      mutable_attach()->::CoolRun::AttachInfo::MergeFrom(from.attach());
    }
  }
}

void RankBonusInfo::CopyFrom(const RankBonusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankBonusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attach()) {
    if (!this->attach().IsInitialized()) return false;
  }
  return true;
}

void RankBonusInfo::Swap(RankBonusInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(group_id_, other->group_id_);
    std::swap(group_name_, other->group_name_);
    std::swap(bonus_id_, other->bonus_id_);
    std::swap(attach_, other->attach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankBonusInfo::GetTypeName() const {
  return "CoolRun.RankBonusInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int RankUserInfo::kUserIdFieldNumber;
const int RankUserInfo::kUserOrderFieldNumber;
const int RankUserInfo::kScoreFieldNumber;
const int RankUserInfo::kDistanceFieldNumber;
const int RankUserInfo::kActorFieldNumber;
const int RankUserInfo::kPetFieldNumber;
const int RankUserInfo::kMagicFieldNumber;
const int RankUserInfo::kUserNameFieldNumber;
#endif  // !_MSC_VER

RankUserInfo::RankUserInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void RankUserInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actor_ = const_cast< ::CoolRun::UnitInfo*>(
      ::CoolRun::UnitInfo::internal_default_instance());
#else
  actor_ = const_cast< ::CoolRun::UnitInfo*>(&::CoolRun::UnitInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pet_ = const_cast< ::CoolRun::UnitInfo*>(
      ::CoolRun::UnitInfo::internal_default_instance());
#else
  pet_ = const_cast< ::CoolRun::UnitInfo*>(&::CoolRun::UnitInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  magic_ = const_cast< ::CoolRun::UnitInfo*>(
      ::CoolRun::UnitInfo::internal_default_instance());
#else
  magic_ = const_cast< ::CoolRun::UnitInfo*>(&::CoolRun::UnitInfo::default_instance());
#endif
}

RankUserInfo::RankUserInfo(const RankUserInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void RankUserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  user_order_ = 0;
  score_ = 0;
  distance_ = 0;
  actor_ = NULL;
  pet_ = NULL;
  magic_ = NULL;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankUserInfo::~RankUserInfo() {
  SharedDtor();
}

void RankUserInfo::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete actor_;
    delete pet_;
    delete magic_;
  }
}

void RankUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RankUserInfo& RankUserInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

RankUserInfo* RankUserInfo::default_instance_ = NULL;

RankUserInfo* RankUserInfo::New() const {
  return new RankUserInfo;
}

void RankUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    user_order_ = 0;
    score_ = 0;
    distance_ = 0;
    if (has_actor()) {
      if (actor_ != NULL) actor_->::CoolRun::UnitInfo::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::CoolRun::UnitInfo::Clear();
    }
    if (has_magic()) {
      if (magic_ != NULL) magic_->::CoolRun::UnitInfo::Clear();
    }
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool RankUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_order;
        break;
      }

      // required int32 user_order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_order_)));
          set_has_user_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distance;
        break;
      }

      // required int32 distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_actor;
        break;
      }

      // required .CoolRun.UnitInfo actor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pet;
        break;
      }

      // optional .CoolRun.UnitInfo pet = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_magic;
        break;
      }

      // optional .CoolRun.UnitInfo magic = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_user_name;
        break;
      }

      // optional string user_name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 user_order = 2;
  if (has_user_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_order(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 distance = 4;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->distance(), output);
  }

  // required .CoolRun.UnitInfo actor = 5;
  if (has_actor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->actor(), output);
  }

  // optional .CoolRun.UnitInfo pet = 6;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->pet(), output);
  }

  // optional .CoolRun.UnitInfo magic = 7;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->magic(), output);
  }

  // optional string user_name = 8;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->user_name(), output);
  }

}

int RankUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 user_order = 2;
    if (has_user_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_order());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // required .CoolRun.UnitInfo actor = 5;
    if (has_actor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actor());
    }

    // optional .CoolRun.UnitInfo pet = 6;
    if (has_pet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .CoolRun.UnitInfo magic = 7;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magic());
    }

    // optional string user_name = 8;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankUserInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RankUserInfo*>(&from));
}

void RankUserInfo::MergeFrom(const RankUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_order()) {
      set_user_order(from.user_order());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_actor()) {
      mutable_actor()->::CoolRun::UnitInfo::MergeFrom(from.actor());
    }
    if (from.has_pet()) {
      mutable_pet()->::CoolRun::UnitInfo::MergeFrom(from.pet());
    }
    if (from.has_magic()) {
      mutable_magic()->::CoolRun::UnitInfo::MergeFrom(from.magic());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
  }
}

void RankUserInfo::CopyFrom(const RankUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankUserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_actor()) {
    if (!this->actor().IsInitialized()) return false;
  }
  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_magic()) {
    if (!this->magic().IsInitialized()) return false;
  }
  return true;
}

void RankUserInfo::Swap(RankUserInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_order_, other->user_order_);
    std::swap(score_, other->score_);
    std::swap(distance_, other->distance_);
    std::swap(actor_, other->actor_);
    std::swap(pet_, other->pet_);
    std::swap(magic_, other->magic_);
    std::swap(user_name_, other->user_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string RankUserInfo::GetTypeName() const {
  return "CoolRun.RankUserInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRankBonusReq::kStubFieldNumber;
#endif  // !_MSC_VER

QueryRankBonusReq::QueryRankBonusReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryRankBonusReq::InitAsDefaultInstance() {
}

QueryRankBonusReq::QueryRankBonusReq(const QueryRankBonusReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRankBonusReq::SharedCtor() {
  _cached_size_ = 0;
  stub_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRankBonusReq::~QueryRankBonusReq() {
  SharedDtor();
}

void QueryRankBonusReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRankBonusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRankBonusReq& QueryRankBonusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryRankBonusReq* QueryRankBonusReq::default_instance_ = NULL;

QueryRankBonusReq* QueryRankBonusReq::New() const {
  return new QueryRankBonusReq;
}

void QueryRankBonusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stub_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryRankBonusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 stub = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stub_)));
          set_has_stub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRankBonusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 stub = 1;
  if (has_stub()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stub(), output);
  }

}

int QueryRankBonusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 stub = 1;
    if (has_stub()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stub());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRankBonusReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryRankBonusReq*>(&from));
}

void QueryRankBonusReq::MergeFrom(const QueryRankBonusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stub()) {
      set_stub(from.stub());
    }
  }
}

void QueryRankBonusReq::CopyFrom(const QueryRankBonusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRankBonusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryRankBonusReq::Swap(QueryRankBonusReq* other) {
  if (other != this) {
    std::swap(stub_, other->stub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryRankBonusReq::GetTypeName() const {
  return "CoolRun.QueryRankBonusReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRankBonusRsp::kRspCodeFieldNumber;
const int QueryRankBonusRsp::kBonusFieldNumber;
#endif  // !_MSC_VER

QueryRankBonusRsp::QueryRankBonusRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryRankBonusRsp::InitAsDefaultInstance() {
}

QueryRankBonusRsp::QueryRankBonusRsp(const QueryRankBonusRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRankBonusRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRankBonusRsp::~QueryRankBonusRsp() {
  SharedDtor();
}

void QueryRankBonusRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRankBonusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRankBonusRsp& QueryRankBonusRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryRankBonusRsp* QueryRankBonusRsp::default_instance_ = NULL;

QueryRankBonusRsp* QueryRankBonusRsp::New() const {
  return new QueryRankBonusRsp;
}

void QueryRankBonusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryRankBonusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bonus;
        break;
      }

      // repeated .CoolRun.RankBonusInfo bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bonus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRankBonusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .CoolRun.RankBonusInfo bonus = 2;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->bonus(i), output);
  }

}

int QueryRankBonusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .CoolRun.RankBonusInfo bonus = 2;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRankBonusRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryRankBonusRsp*>(&from));
}

void QueryRankBonusRsp::MergeFrom(const QueryRankBonusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void QueryRankBonusRsp::CopyFrom(const QueryRankBonusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRankBonusRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bonus_size(); i++) {
    if (!this->bonus(i).IsInitialized()) return false;
  }
  return true;
}

void QueryRankBonusRsp::Swap(QueryRankBonusRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    bonus_.Swap(&other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryRankBonusRsp::GetTypeName() const {
  return "CoolRun.QueryRankBonusRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRankListReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

QueryRankListReq::QueryRankListReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryRankListReq::InitAsDefaultInstance() {
}

QueryRankListReq::QueryRankListReq(const QueryRankListReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRankListReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRankListReq::~QueryRankListReq() {
  SharedDtor();
}

void QueryRankListReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRankListReq& QueryRankListReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryRankListReq* QueryRankListReq::default_instance_ = NULL;

QueryRankListReq* QueryRankListReq::New() const {
  return new QueryRankListReq;
}

void QueryRankListReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

}

int QueryRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRankListReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryRankListReq*>(&from));
}

void QueryRankListReq::MergeFrom(const QueryRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void QueryRankListReq::CopyFrom(const QueryRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRankListReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryRankListReq::Swap(QueryRankListReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryRankListReq::GetTypeName() const {
  return "CoolRun.QueryRankListReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryRankListRsp::kRspCodeFieldNumber;
const int QueryRankListRsp::kUserListFieldNumber;
const int QueryRankListRsp::kCurGroupFieldNumber;
#endif  // !_MSC_VER

QueryRankListRsp::QueryRankListRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryRankListRsp::InitAsDefaultInstance() {
}

QueryRankListRsp::QueryRankListRsp(const QueryRankListRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  cur_group_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryRankListRsp::~QueryRankListRsp() {
  SharedDtor();
}

void QueryRankListRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryRankListRsp& QueryRankListRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryRankListRsp* QueryRankListRsp::default_instance_ = NULL;

QueryRankListRsp* QueryRankListRsp::New() const {
  return new QueryRankListRsp;
}

void QueryRankListRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    cur_group_ = 0;
  }
  user_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        break;
      }

      // repeated .CoolRun.RankUserInfo user_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_user_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_list;
        if (input->ExpectTag(24)) goto parse_cur_group;
        break;
      }

      // optional int32 cur_group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_group_)));
          set_has_cur_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .CoolRun.RankUserInfo user_list = 2;
  for (int i = 0; i < this->user_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user_list(i), output);
  }

  // optional int32 cur_group = 3;
  if (has_cur_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_group(), output);
  }

}

int QueryRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional int32 cur_group = 3;
    if (has_cur_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_group());
    }

  }
  // repeated .CoolRun.RankUserInfo user_list = 2;
  total_size += 1 * this->user_list_size();
  for (int i = 0; i < this->user_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->user_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryRankListRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryRankListRsp*>(&from));
}

void QueryRankListRsp::MergeFrom(const QueryRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_list_.MergeFrom(from.user_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_cur_group()) {
      set_cur_group(from.cur_group());
    }
  }
}

void QueryRankListRsp::CopyFrom(const QueryRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRankListRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < user_list_size(); i++) {
    if (!this->user_list(i).IsInitialized()) return false;
  }
  return true;
}

void QueryRankListRsp::Swap(QueryRankListRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    user_list_.Swap(&other->user_list_);
    std::swap(cur_group_, other->cur_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryRankListRsp::GetTypeName() const {
  return "CoolRun.QueryRankListRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int BonusInfo::kIdFieldNumber;
const int BonusInfo::kIsGetFieldNumber;
const int BonusInfo::kEnableFieldNumber;
const int BonusInfo::kAttachFieldNumber;
#endif  // !_MSC_VER

BonusInfo::BonusInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BonusInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attach_ = const_cast< ::CoolRun::AttachInfo*>(
      ::CoolRun::AttachInfo::internal_default_instance());
#else
  attach_ = const_cast< ::CoolRun::AttachInfo*>(&::CoolRun::AttachInfo::default_instance());
#endif
}

BonusInfo::BonusInfo(const BonusInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BonusInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  is_get_ = false;
  enable_ = false;
  attach_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BonusInfo::~BonusInfo() {
  SharedDtor();
}

void BonusInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attach_;
  }
}

void BonusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BonusInfo& BonusInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

BonusInfo* BonusInfo::default_instance_ = NULL;

BonusInfo* BonusInfo::New() const {
  return new BonusInfo;
}

void BonusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    is_get_ = false;
    enable_ = false;
    if (has_attach()) {
      if (attach_ != NULL) attach_->::CoolRun::AttachInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BonusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get;
        break;
      }

      // required bool is_get = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_get_)));
          set_has_is_get();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enable;
        break;
      }

      // required bool enable = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attach;
        break;
      }

      // optional .CoolRun.AttachInfo attach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BonusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool is_get = 2;
  if (has_is_get()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_get(), output);
  }

  // required bool enable = 3;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }

  // optional .CoolRun.AttachInfo attach = 4;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->attach(), output);
  }

}

int BonusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool is_get = 2;
    if (has_is_get()) {
      total_size += 1 + 1;
    }

    // required bool enable = 3;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional .CoolRun.AttachInfo attach = 4;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BonusInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BonusInfo*>(&from));
}

void BonusInfo::MergeFrom(const BonusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_get()) {
      set_is_get(from.is_get());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_attach()) {
      mutable_attach()->::CoolRun::AttachInfo::MergeFrom(from.attach());
    }
  }
}

void BonusInfo::CopyFrom(const BonusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BonusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_attach()) {
    if (!this->attach().IsInitialized()) return false;
  }
  return true;
}

void BonusInfo::Swap(BonusInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_get_, other->is_get_);
    std::swap(enable_, other->enable_);
    std::swap(attach_, other->attach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BonusInfo::GetTypeName() const {
  return "CoolRun.BonusInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySystemBonusReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

QuerySystemBonusReq::QuerySystemBonusReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuerySystemBonusReq::InitAsDefaultInstance() {
}

QuerySystemBonusReq::QuerySystemBonusReq(const QuerySystemBonusReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySystemBonusReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySystemBonusReq::~QuerySystemBonusReq() {
  SharedDtor();
}

void QuerySystemBonusReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QuerySystemBonusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuerySystemBonusReq& QuerySystemBonusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QuerySystemBonusReq* QuerySystemBonusReq::default_instance_ = NULL;

QuerySystemBonusReq* QuerySystemBonusReq::New() const {
  return new QuerySystemBonusReq;
}

void QuerySystemBonusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuerySystemBonusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySystemBonusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

}

int QuerySystemBonusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySystemBonusReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuerySystemBonusReq*>(&from));
}

void QuerySystemBonusReq::MergeFrom(const QuerySystemBonusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void QuerySystemBonusReq::CopyFrom(const QuerySystemBonusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySystemBonusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuerySystemBonusReq::Swap(QuerySystemBonusReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuerySystemBonusReq::GetTypeName() const {
  return "CoolRun.QuerySystemBonusReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QuerySystemBonusRsp::kRspCodeFieldNumber;
const int QuerySystemBonusRsp::kBonusFieldNumber;
#endif  // !_MSC_VER

QuerySystemBonusRsp::QuerySystemBonusRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QuerySystemBonusRsp::InitAsDefaultInstance() {
}

QuerySystemBonusRsp::QuerySystemBonusRsp(const QuerySystemBonusRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QuerySystemBonusRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuerySystemBonusRsp::~QuerySystemBonusRsp() {
  SharedDtor();
}

void QuerySystemBonusRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QuerySystemBonusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QuerySystemBonusRsp& QuerySystemBonusRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QuerySystemBonusRsp* QuerySystemBonusRsp::default_instance_ = NULL;

QuerySystemBonusRsp* QuerySystemBonusRsp::New() const {
  return new QuerySystemBonusRsp;
}

void QuerySystemBonusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QuerySystemBonusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bonus;
        break;
      }

      // repeated .CoolRun.BonusInfo bonus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bonus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bonus;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuerySystemBonusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .CoolRun.BonusInfo bonus = 2;
  for (int i = 0; i < this->bonus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->bonus(i), output);
  }

}

int QuerySystemBonusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  // repeated .CoolRun.BonusInfo bonus = 2;
  total_size += 1 * this->bonus_size();
  for (int i = 0; i < this->bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bonus(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuerySystemBonusRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QuerySystemBonusRsp*>(&from));
}

void QuerySystemBonusRsp::MergeFrom(const QuerySystemBonusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bonus_.MergeFrom(from.bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void QuerySystemBonusRsp::CopyFrom(const QuerySystemBonusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuerySystemBonusRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bonus_size(); i++) {
    if (!this->bonus(i).IsInitialized()) return false;
  }
  return true;
}

void QuerySystemBonusRsp::Swap(QuerySystemBonusRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    bonus_.Swap(&other->bonus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QuerySystemBonusRsp::GetTypeName() const {
  return "CoolRun.QuerySystemBonusRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemBonusReq::kUserIdFieldNumber;
const int GetSystemBonusReq::kIdFieldNumber;
#endif  // !_MSC_VER

GetSystemBonusReq::GetSystemBonusReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetSystemBonusReq::InitAsDefaultInstance() {
}

GetSystemBonusReq::GetSystemBonusReq(const GetSystemBonusReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemBonusReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemBonusReq::~GetSystemBonusReq() {
  SharedDtor();
}

void GetSystemBonusReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetSystemBonusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetSystemBonusReq& GetSystemBonusReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

GetSystemBonusReq* GetSystemBonusReq::default_instance_ = NULL;

GetSystemBonusReq* GetSystemBonusReq::New() const {
  return new GetSystemBonusReq;
}

void GetSystemBonusReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetSystemBonusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemBonusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->user_id(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

}

int GetSystemBonusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemBonusReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetSystemBonusReq*>(&from));
}

void GetSystemBonusReq::MergeFrom(const GetSystemBonusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
}

void GetSystemBonusReq::CopyFrom(const GetSystemBonusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemBonusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetSystemBonusReq::Swap(GetSystemBonusReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetSystemBonusReq::GetTypeName() const {
  return "CoolRun.GetSystemBonusReq";
}


// ===================================================================

#ifndef _MSC_VER
const int GetSystemBonusRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

GetSystemBonusRsp::GetSystemBonusRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GetSystemBonusRsp::InitAsDefaultInstance() {
}

GetSystemBonusRsp::GetSystemBonusRsp(const GetSystemBonusRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GetSystemBonusRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetSystemBonusRsp::~GetSystemBonusRsp() {
  SharedDtor();
}

void GetSystemBonusRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GetSystemBonusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GetSystemBonusRsp& GetSystemBonusRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

GetSystemBonusRsp* GetSystemBonusRsp::default_instance_ = NULL;

GetSystemBonusRsp* GetSystemBonusRsp::New() const {
  return new GetSystemBonusRsp;
}

void GetSystemBonusRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GetSystemBonusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetSystemBonusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int GetSystemBonusRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSystemBonusRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GetSystemBonusRsp*>(&from));
}

void GetSystemBonusRsp::MergeFrom(const GetSystemBonusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void GetSystemBonusRsp::CopyFrom(const GetSystemBonusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSystemBonusRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetSystemBonusRsp::Swap(GetSystemBonusRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GetSystemBonusRsp::GetTypeName() const {
  return "CoolRun.GetSystemBonusRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftBagAttach::kWeightFieldNumber;
const int GiftBagAttach::kAttachFieldNumber;
#endif  // !_MSC_VER

GiftBagAttach::GiftBagAttach()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftBagAttach::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attach_ = const_cast< ::CoolRun::AttachInfo*>(
      ::CoolRun::AttachInfo::internal_default_instance());
#else
  attach_ = const_cast< ::CoolRun::AttachInfo*>(&::CoolRun::AttachInfo::default_instance());
#endif
}

GiftBagAttach::GiftBagAttach(const GiftBagAttach& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftBagAttach::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  attach_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftBagAttach::~GiftBagAttach() {
  SharedDtor();
}

void GiftBagAttach::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attach_;
  }
}

void GiftBagAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftBagAttach& GiftBagAttach::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

GiftBagAttach* GiftBagAttach::default_instance_ = NULL;

GiftBagAttach* GiftBagAttach::New() const {
  return new GiftBagAttach;
}

void GiftBagAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weight_ = 0;
    if (has_attach()) {
      if (attach_ != NULL) attach_->::CoolRun::AttachInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftBagAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attach;
        break;
      }

      // optional .CoolRun.AttachInfo attach = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftBagAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 weight = 1;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weight(), output);
  }

  // optional .CoolRun.AttachInfo attach = 2;
  if (has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->attach(), output);
  }

}

int GiftBagAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 weight = 1;
    if (has_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weight());
    }

    // optional .CoolRun.AttachInfo attach = 2;
    if (has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attach());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftBagAttach::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftBagAttach*>(&from));
}

void GiftBagAttach::MergeFrom(const GiftBagAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_attach()) {
      mutable_attach()->::CoolRun::AttachInfo::MergeFrom(from.attach());
    }
  }
}

void GiftBagAttach::CopyFrom(const GiftBagAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBagAttach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_attach()) {
    if (!this->attach().IsInitialized()) return false;
  }
  return true;
}

void GiftBagAttach::Swap(GiftBagAttach* other) {
  if (other != this) {
    std::swap(weight_, other->weight_);
    std::swap(attach_, other->attach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftBagAttach::GetTypeName() const {
  return "CoolRun.GiftBagAttach";
}


// ===================================================================

#ifndef _MSC_VER
const int GiftBagInfo::kIdFieldNumber;
const int GiftBagInfo::kIsRandomFieldNumber;
const int GiftBagInfo::kAttachFieldNumber;
#endif  // !_MSC_VER

GiftBagInfo::GiftBagInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GiftBagInfo::InitAsDefaultInstance() {
}

GiftBagInfo::GiftBagInfo(const GiftBagInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GiftBagInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  is_random_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftBagInfo::~GiftBagInfo() {
  SharedDtor();
}

void GiftBagInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GiftBagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GiftBagInfo& GiftBagInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

GiftBagInfo* GiftBagInfo::default_instance_ = NULL;

GiftBagInfo* GiftBagInfo::New() const {
  return new GiftBagInfo;
}

void GiftBagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    is_random_ = false;
  }
  attach_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GiftBagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_random;
        break;
      }

      // required bool is_random = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_random:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_random_)));
          set_has_is_random();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attach;
        break;
      }

      // repeated .CoolRun.GiftBagAttach attach = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attach;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftBagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required bool is_random = 2;
  if (has_is_random()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_random(), output);
  }

  // repeated .CoolRun.GiftBagAttach attach = 3;
  for (int i = 0; i < this->attach_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->attach(i), output);
  }

}

int GiftBagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required bool is_random = 2;
    if (has_is_random()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CoolRun.GiftBagAttach attach = 3;
  total_size += 1 * this->attach_size();
  for (int i = 0; i < this->attach_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attach(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftBagInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GiftBagInfo*>(&from));
}

void GiftBagInfo::MergeFrom(const GiftBagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_.MergeFrom(from.attach_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_random()) {
      set_is_random(from.is_random());
    }
  }
}

void GiftBagInfo::CopyFrom(const GiftBagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftBagInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < attach_size(); i++) {
    if (!this->attach(i).IsInitialized()) return false;
  }
  return true;
}

void GiftBagInfo::Swap(GiftBagInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_random_, other->is_random_);
    attach_.Swap(&other->attach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GiftBagInfo::GetTypeName() const {
  return "CoolRun.GiftBagInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGiftBagReq::kVersionFieldNumber;
#endif  // !_MSC_VER

QueryGiftBagReq::QueryGiftBagReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryGiftBagReq::InitAsDefaultInstance() {
}

QueryGiftBagReq::QueryGiftBagReq(const QueryGiftBagReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryGiftBagReq::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGiftBagReq::~QueryGiftBagReq() {
  SharedDtor();
}

void QueryGiftBagReq::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryGiftBagReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryGiftBagReq& QueryGiftBagReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryGiftBagReq* QueryGiftBagReq::default_instance_ = NULL;

QueryGiftBagReq* QueryGiftBagReq::New() const {
  return new QueryGiftBagReq;
}

void QueryGiftBagReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryGiftBagReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryGiftBagReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

}

int QueryGiftBagReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGiftBagReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryGiftBagReq*>(&from));
}

void QueryGiftBagReq::MergeFrom(const QueryGiftBagReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void QueryGiftBagReq::CopyFrom(const QueryGiftBagReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGiftBagReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryGiftBagReq::Swap(QueryGiftBagReq* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryGiftBagReq::GetTypeName() const {
  return "CoolRun.QueryGiftBagReq";
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGiftBagRsp::kRspCodeFieldNumber;
const int QueryGiftBagRsp::kGiftBagFieldNumber;
const int QueryGiftBagRsp::kIsUpdateFieldNumber;
const int QueryGiftBagRsp::kVersionFieldNumber;
#endif  // !_MSC_VER

QueryGiftBagRsp::QueryGiftBagRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void QueryGiftBagRsp::InitAsDefaultInstance() {
}

QueryGiftBagRsp::QueryGiftBagRsp(const QueryGiftBagRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void QueryGiftBagRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  is_update_ = false;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGiftBagRsp::~QueryGiftBagRsp() {
  SharedDtor();
}

void QueryGiftBagRsp::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void QueryGiftBagRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const QueryGiftBagRsp& QueryGiftBagRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

QueryGiftBagRsp* QueryGiftBagRsp::default_instance_ = NULL;

QueryGiftBagRsp* QueryGiftBagRsp::New() const {
  return new QueryGiftBagRsp;
}

void QueryGiftBagRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    is_update_ = false;
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
  }
  gift_bag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool QueryGiftBagRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_bag;
        break;
      }

      // repeated .CoolRun.GiftBagInfo gift_bag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_bag;
        if (input->ExpectTag(24)) goto parse_is_update;
        break;
      }

      // optional bool is_update = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_update_)));
          set_has_is_update();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_version;
        break;
      }

      // optional string version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryGiftBagRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // repeated .CoolRun.GiftBagInfo gift_bag = 2;
  for (int i = 0; i < this->gift_bag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->gift_bag(i), output);
  }

  // optional bool is_update = 3;
  if (has_is_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_update(), output);
  }

  // optional string version = 4;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->version(), output);
  }

}

int QueryGiftBagRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional bool is_update = 3;
    if (has_is_update()) {
      total_size += 1 + 1;
    }

    // optional string version = 4;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

  }
  // repeated .CoolRun.GiftBagInfo gift_bag = 2;
  total_size += 1 * this->gift_bag_size();
  for (int i = 0; i < this->gift_bag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_bag(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGiftBagRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const QueryGiftBagRsp*>(&from));
}

void QueryGiftBagRsp::MergeFrom(const QueryGiftBagRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  gift_bag_.MergeFrom(from.gift_bag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_is_update()) {
      set_is_update(from.is_update());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
}

void QueryGiftBagRsp::CopyFrom(const QueryGiftBagRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGiftBagRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gift_bag_size(); i++) {
    if (!this->gift_bag(i).IsInitialized()) return false;
  }
  return true;
}

void QueryGiftBagRsp::Swap(QueryGiftBagRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    gift_bag_.Swap(&other->gift_bag_);
    std::swap(is_update_, other->is_update_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string QueryGiftBagRsp::GetTypeName() const {
  return "CoolRun.QueryGiftBagRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int UnifyReq::kPlatformFieldNumber;
const int UnifyReq::kAccountFieldNumber;
const int UnifyReq::kPasswdFieldNumber;
#endif  // !_MSC_VER

UnifyReq::UnifyReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnifyReq::InitAsDefaultInstance() {
}

UnifyReq::UnifyReq(const UnifyReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnifyReq::SharedCtor() {
  _cached_size_ = 0;
  platform_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnifyReq::~UnifyReq() {
  SharedDtor();
}

void UnifyReq::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnifyReq& UnifyReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UnifyReq* UnifyReq::default_instance_ = NULL;

UnifyReq* UnifyReq::New() const {
  return new UnifyReq;
}

void UnifyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    platform_ = 0;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UnifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .CoolRun.PlatformType platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CoolRun::PlatformType_IsValid(value)) {
            set_platform(static_cast< ::CoolRun::PlatformType >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .CoolRun.PlatformType platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->platform(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }

}

int UnifyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .CoolRun.PlatformType platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->platform());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnifyReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnifyReq*>(&from));
}

void UnifyReq::MergeFrom(const UnifyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
  }
}

void UnifyReq::CopyFrom(const UnifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnifyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnifyReq::Swap(UnifyReq* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(account_, other->account_);
    std::swap(passwd_, other->passwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnifyReq::GetTypeName() const {
  return "CoolRun.UnifyReq";
}


// ===================================================================

#ifndef _MSC_VER
const int UnifyRsp::kRspCodeFieldNumber;
const int UnifyRsp::kUserIdFieldNumber;
#endif  // !_MSC_VER

UnifyRsp::UnifyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void UnifyRsp::InitAsDefaultInstance() {
}

UnifyRsp::UnifyRsp(const UnifyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void UnifyRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  user_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnifyRsp::~UnifyRsp() {
  SharedDtor();
}

void UnifyRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void UnifyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UnifyRsp& UnifyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

UnifyRsp* UnifyRsp::default_instance_ = NULL;

UnifyRsp* UnifyRsp::New() const {
  return new UnifyRsp;
}

void UnifyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
    user_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool UnifyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int32 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnifyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional int32 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->user_id(), output);
  }

}

int UnifyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

    // optional int32 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_id());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnifyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UnifyRsp*>(&from));
}

void UnifyRsp::MergeFrom(const UnifyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
}

void UnifyRsp::CopyFrom(const UnifyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnifyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UnifyRsp::Swap(UnifyRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string UnifyRsp::GetTypeName() const {
  return "CoolRun.UnifyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int ReconfigureReq::kTypeFieldNumber;
#endif  // !_MSC_VER

ReconfigureReq::ReconfigureReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReconfigureReq::InitAsDefaultInstance() {
}

ReconfigureReq::ReconfigureReq(const ReconfigureReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReconfigureReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconfigureReq::~ReconfigureReq() {
  SharedDtor();
}

void ReconfigureReq::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReconfigureReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReconfigureReq& ReconfigureReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ReconfigureReq* ReconfigureReq::default_instance_ = NULL;

ReconfigureReq* ReconfigureReq::New() const {
  return new ReconfigureReq;
}

void ReconfigureReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReconfigureReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconfigureReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

}

int ReconfigureReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconfigureReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReconfigureReq*>(&from));
}

void ReconfigureReq::MergeFrom(const ReconfigureReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void ReconfigureReq::CopyFrom(const ReconfigureReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconfigureReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReconfigureReq::Swap(ReconfigureReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReconfigureReq::GetTypeName() const {
  return "CoolRun.ReconfigureReq";
}


// ===================================================================

#ifndef _MSC_VER
const int ReconfigureRsp::kRspCodeFieldNumber;
#endif  // !_MSC_VER

ReconfigureRsp::ReconfigureRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ReconfigureRsp::InitAsDefaultInstance() {
}

ReconfigureRsp::ReconfigureRsp(const ReconfigureRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ReconfigureRsp::SharedCtor() {
  _cached_size_ = 0;
  rsp_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconfigureRsp::~ReconfigureRsp() {
  SharedDtor();
}

void ReconfigureRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ReconfigureRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ReconfigureRsp& ReconfigureRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_protocol_5fmessage_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_protocol_5fmessage_2eproto();
#endif
  return *default_instance_;
}

ReconfigureRsp* ReconfigureRsp::default_instance_ = NULL;

ReconfigureRsp* ReconfigureRsp::New() const {
  return new ReconfigureRsp;
}

void ReconfigureRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rsp_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ReconfigureRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rsp_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));
          set_has_rsp_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconfigureRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rsp_code = 1;
  if (has_rsp_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

}

int ReconfigureRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rsp_code = 1;
    if (has_rsp_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsp_code());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconfigureRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ReconfigureRsp*>(&from));
}

void ReconfigureRsp::MergeFrom(const ReconfigureRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rsp_code()) {
      set_rsp_code(from.rsp_code());
    }
  }
}

void ReconfigureRsp::CopyFrom(const ReconfigureRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconfigureRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReconfigureRsp::Swap(ReconfigureRsp* other) {
  if (other != this) {
    std::swap(rsp_code_, other->rsp_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ReconfigureRsp::GetTypeName() const {
  return "CoolRun.ReconfigureRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CoolRun

// @@protoc_insertion_point(global_scope)
